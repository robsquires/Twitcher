<?php

namespace Twitcher\Entity\Repositories;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Twitcher\Entity;

/**
 * SightingRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SightingRepository extends EntityRepository {

    public function saveSighting(Entity\Sighting $sighting, $data) {

        if (isset($data['user']))
            $sighting->setUser($data['user']);
        if (isset($data['latitude']))
            $sighting->setLatitude($data['latitude']);
        if (isset($data['longitude']))
            $sighting->setLongitude($data['longitude']);
        if (isset($data['grid_ref']))
            $sighting->setGridRef($data['grid_ref']);
        if (isset($data['sighting_id']))
            $sighting->setDeviceSightingId($data['device_sighting_id']);
        if (isset($data['notes']))
            $sighting->setNotes($data['notes']);
        if (isset($data['address']))
            $sighting->setAddress($data['address']);
        if (isset($data['bird']))
            $sighting->setBird($data['bird']);
        if (isset($data['time_stamp'])) {

            //$datetime = time();
            $dateObj = new \DateTime();

            $sighting->setTimestamp($dateObj);
        }

        //echo $sighting->getBird()->getName();

        $this->getEntityManager()->persist($sighting);
    }

    public function getAll() {
        $dql = <<<DQL
                SELECT
                Sighting, User, Bird
                FROM \Twitcher\Entity\Sighting Sighting
                JOIN Sighting.bird Bird
                JOIN Sighting.user User
                JOIN Bird.status Status

DQL;

        $query = $this->getEntityManager()->createQuery($dql);

        $result = $query->getResult();

        return $result;
    }

    
    public function getWhere($terms, $orderBy = null, $orderDirection = null, $offset = null, $limit = null )
    {
     
        $qb = $this->getEntityManager()->createQueryBuilder();

        //BASE QUERY
        $qb->select('Sighting')
                ->from('\Twitcher\Entity\Sighting', 'Sighting')
                ->join('Sighting.bird', 'Bird')
                ->join('Bird.status', 'Status')
                ->join('Sighting.user', 'User');

        //START CONDITIONAL WHERE CLAUSES

        //BIRD
        //if bird is set wildcard search on firstName and lastName
        if (isset($terms['bird']))
        {
            $qb->andWhere(
                    $qb->expr()->orX(
                            $qb->expr()->like('Bird.firstName', "'%" . $terms['bird'] . "%'"),
                            $qb->expr()->like('Bird.lastName', "'%" . $terms['bird'] . "%'")
                    )
            );
        }

        //LATIN_NAME
        //if latin_name is set - specific search on latin name field
        if (isset($terms['latin_name'])) {
            $qb->andWhere(
                    $qb->expr()->eq('Bird.latin_name', "'" . $terms['latin_name'] . "'")
            );
        }

        //DATE_FROM & DATE_TO
        //DATE QUERIES
        if (isset($terms['date_from']) && isset($terms['date_to']))
        {
            $dateFrom = \date_create_from_format('Ymd', $terms['date_from']);
            $dateTo = \date_create_from_format('Ymd', $terms['date_to']);

            $qb->andWhere(
                    $qb->expr()->gte(   "CONCATDATE(DATEFORMAT(Sighting.timestamp,'%Y'),DATEFORMAT(Sighting.timestamp,'%m'),DATEFORMAT(Sighting.timestamp,'%d'))",
                                        $dateFrom->format('Y') . $dateFrom->format('m') . $dateFrom->format('d')),

                    $qb->expr()->lte(   "CONCATDATE(DATEFORMAT(Sighting.timestamp,'%Y'),DATEFORMAT(Sighting.timestamp,'%m'),DATEFORMAT(Sighting.timestamp,'%d'))",
                                        $dateTo->format('Y') . $dateTo->format('m') . $dateTo->format('d'))
            );

        }
        elseif (isset($terms['date_from']) && !isset($terms['date_to']))
        {
            $date = \date_create_from_format('Ymd', $terms['date_from']);

            $qb->andWhere(
                    $qb->expr()->eq("YEAR(Sighting.timestamp)", $date->format('Y')),
                    $qb->expr()->eq("MONTH(Sighting.timestamp)", $date->format('m')),
                    $qb->expr()->eq("DAY(Sighting.timestamp)", $date->format('d'))
            );
        }

        //TIME_FROM & TIME_TO

        if (isset($terms['time_from']) && isset($terms['time_to']))
        {
            $timeFrom = \date_create_from_format('Hi', $terms['time_from']);
            $timeTo = \date_create_from_format('Hi', $terms['time_to']);

            $qb->andWhere(
                    $qb->expr()->gte(   "CONCATDATE(DATEFORMAT(Sighting.timestamp,'%H'),DATEFORMAT(Sighting.timestamp,'%i'))",
                                        $timeFrom->format('H') . $timeFrom->format('i')),

                    $qb->expr()->lte(   "CONCATDATE(DATEFORMAT(Sighting.timestamp,'%H'),DATEFORMAT(Sighting.timestamp,'%i'))",
                                        $timeTo->format('Y') . $timeTo->format('m'))
            );

        }
        elseif (isset($terms['time_from']) && !isset($terms['time_to']))
        {
            $time = \date_create_from_format('Hi', $terms['time_from']);

            $qb->andWhere(
                    $qb->expr()->eq('HOUR(Sighting.timestamp)', $time->format('H')),
                    $qb->expr()->eq('MINUTE(Sighting.timestamp)', $time->format('i'))
            );
        }

        //LATITUDE & LONGITUDE
        if (isset($terms['longitude']) && isset($terms['latitude']) && isset($terms['distance']))
        {
            if (!isset($terms['units']))        $quot_unit = self::QUOT_MI;
            else if ($terms['units'] == 'mi')   $quot_unit = self::QUOT_MI;
            else                                $quot_unit = self::QUOT_KM;

            //build the calculation - pythagoras right angle triangle
            // (record_lat-lat)^2 + (record_long-long)^2 <= distance (converted to lat/long)
            $long = "POWER( (" . $terms['longitude'] . " - Sighting.longitude),2)";
            $lat = "POWER((" . $terms['latitude'] . " - Sighting.latitude),2)";
            $comp = "POWER((" . $terms['distance'] . "/" . $quot_unit . "),2) ";

            $qb->andWhere(
                    $qb->expr()->lte($long . "+" . $lat, $comp)
            );
        }

        //STATUS
        //if status is set, sightings should match specific status name
        if (isset($terms['status']))
        {
            $qb->andWhere(
                    $qb->expr()->like('Status.status', "'" . $terms['status'] . "'")
            );
        }

        //USER
        //if user is set, sightings should match specific username
        if (isset($terms['user']))
        {
            $qb->andWhere(
                    $qb->expr()->like('User.username', "'" . $terms['user'] . "'")
            );
        }

        //add ORDER BY if $orderBY is set;
        if($orderBy && $orderDirection)
            $qb->orderBy($orderBy,$orderDirection);



        $query = $qb->getQuery();
  
        
        if($offset)
            $query->setFirstResult($offset);
        if($limit)
            $query->setMaxResults($limit);
        
        return $query->getResult();
    }

}